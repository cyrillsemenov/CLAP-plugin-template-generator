/////////////////////////
// clap_plugin_factory //
/////////////////////////
#include "plugin.h"
#include <assert.h>
#include <stdbool.h>

static struct {
    const clap_plugin_descriptor_t *desc;
    clap_plugin_t *(CLAP_ABI *create)(const clap_host_t *host);
} s_plugins[] = {
    {
        .desc = &s_{{ plugin_prefix }}_desc,
        .create = {{ plugin_prefix }}_create,
    },
};

static uint32_t
plugin_factory_get_plugin_count(const struct clap_plugin_factory *factory) {
    (void)factory;
    return sizeof(s_plugins) / sizeof(s_plugins[0]);
}

static const clap_plugin_descriptor_t *
plugin_factory_get_plugin_descriptor(const struct clap_plugin_factory *factory,
                                     uint32_t index) {
    (void)factory;
    return s_plugins[index].desc;
}

static const clap_plugin_t *
plugin_factory_create_plugin(const struct clap_plugin_factory *factory,
                             const clap_host_t *host, const char *plugin_id) {
    (void)factory;
    if (!clap_version_is_compatible(host->clap_version)) {
        return NULL;
    }

    const int N = sizeof(s_plugins) / sizeof(s_plugins[0]);
    for (int i = 0; i < N; ++i)
        if (!strcmp(plugin_id, s_plugins[i].desc->id))
            return s_plugins[i].create(host);

    return NULL;
}

static const clap_plugin_factory_t s_plugin_factory = {
    .get_plugin_count = plugin_factory_get_plugin_count,
    .get_plugin_descriptor = plugin_factory_get_plugin_descriptor,
    .create_plugin = plugin_factory_create_plugin,
};

////////////////
// clap_entry //
////////////////

static bool entry_init(const char *plugin_path) {
{%- block entry_init %}
    (void)plugin_path;
    // perform the plugin initialization
{%- endblock %}
    return true;
}

static void entry_deinit(void) {
{%- block entry_deinit %}
    // perform the plugin de-initialization
{%- endblock %}
}

#ifdef CLAP_HAS_THREAD
static mtx_t g_entry_lock;
static once_flag g_entry_once = ONCE_FLAG_INIT;
#endif

static int g_entry_init_counter = 0;

#ifdef CLAP_HAS_THREAD
// Initializes the necessary mutex for the entry guard
static void entry_init_guard_init(void) {
    mtx_init(&g_entry_lock, mtx_plain);
}
#endif

// Thread safe init counter
static bool entry_init_guard(const char *plugin_path) {
#ifdef CLAP_HAS_THREAD
    call_once(&g_entry_once, entry_init_guard_init);

    mtx_lock(&g_entry_lock);
#endif

    const int cnt = ++g_entry_init_counter;
    assert(cnt > 0);

    bool succeed = true;
    if (cnt == 1) {
        succeed = entry_init(plugin_path);
        if (!succeed)
            g_entry_init_counter = 0;
    }

#ifdef CLAP_HAS_THREAD
    mtx_unlock(&g_entry_lock);
#endif

    return succeed;
}

// Thread safe deinit counter
static void entry_deinit_guard(void) {
#ifdef CLAP_HAS_THREAD
    call_once(&g_entry_once, entry_init_guard_init);

    mtx_lock(&g_entry_lock);
#endif

    if (g_entry_init_counter <= 0) {
#ifdef CLAP_HAS_THREAD
        mtx_unlock(&g_entry_lock);
#endif
        assert(false && "Deinitialization called more times than initialization");
        return;
    }

    const int cnt = --g_entry_init_counter;

    if (cnt == 0)
        entry_deinit();

#ifdef CLAP_HAS_THREAD
    mtx_unlock(&g_entry_lock);
#endif
}

static const void *entry_get_factory(const char *factory_id) {
#ifdef CLAP_HAS_THREAD
    call_once(&g_entry_once, entry_init_guard_init);
#endif

    assert(g_entry_init_counter > 0);
    if (g_entry_init_counter <= 0)
        return NULL;

    if (!strcmp(factory_id, CLAP_PLUGIN_FACTORY_ID))
        return &s_plugin_factory;
    return NULL;
}

// This symbol will be resolved by the host
CLAP_EXPORT const clap_plugin_entry_t clap_entry = {
    .clap_version = CLAP_VERSION_INIT,
    .init = entry_init_guard,
    .deinit = entry_deinit_guard,
    .get_factory = entry_get_factory,
};


